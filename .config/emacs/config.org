* Programas
** IRC
** RSS
** Gemini
* Package Manager
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq-default
   use-package-always-ensure t)
#+END_SRC
* Better Defaults
** DONE [[https://wiki.archlinux.org/index.php/XDG_Base_Directory][XDG Base Directory]]
#+BEGIN_SRC emacs-lisp
  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")

  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")

  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")
#+END_SRC
** Auto-save && Backup files
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :config
    (super-save-mode +1)
    :init
    (setq super-save-auto-save-when-idle t)
    (setq auto-save-default nil))
#+END_SRC
** Frame title format
#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format '("%b"))
#+END_SRC
** TODO Show railing Whitespace
#+BEGIN_SRC emacs-lisp

#+END_SRC
* TODO Keybindings
#+BEGIN_SRC emacs-lisp
  (cua-mode t) ;; C-x: Cut; C-c: Copy; C-v: Paste
  (global-set-key (kbd "C-s") 'save-buffer)
  (global-set-key (kbd "C-S-s") 'save-some-buffers)
  (global-set-key (kbd "C-a") 'mark-whole-buffer)
  (use-package undo-fu
    :bind (("C-z" . undo-fu-only-undo)
           ("C-y" . undo-fu-only-redo)))
#+END_SRC
* Appearance
** Fonts
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Operator Mono")
  (set-fontset-font t nil "Symbols Nerd Font" nil 'append)
  (set-fontset-font t nil "Noto Color Emoji" nil 'append)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config (load-theme 'doom-nord t))
#+END_SRC
** Window
#+BEGIN_SRC emacs-lisp
  (when window-system
    (menu-bar-mode 1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (setq-default mode-line-format nil))
#+END_SRC
** Tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+END_SRC
** Side Bar
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package neotree
    :bind ("C-b" . neotree-toggle)
    :init
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
    (setq neo-window-position 'right)
    (setq neo-window-fixed-size nil)
    (setq neo-show-hidden-files t)
    (setq neo-click-changes-root t)
#+END_SRC
** Defaults
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq org-startup-indented t)
  (global-visual-line-mode t)
#+END_SRC
** Emojis
#+BEGIN_SRC emacs-lisp
#+END_SRC
* Org-mode
** Org-mode
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Packages
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Capture
*** Awesome
**** Audiovisual
**** Software
**** Libraries
** Cross out done items.
#+BEGIN_SRC emacs-lisp
(defun my/modify-org-done-face ()
  (setq org-fontify-done-headline t)
  (set-face-attribute 'org-done nil :strike-through t)
  (set-face-attribute 'org-headline-done nil
                      :strike-through t
                      :foreground "light gray"))

(eval-after-load "org"
  (add-hook 'org-add-hook 'my/modify-org-done-face))
#+END_SRC
* TODOs
** XDG
** Autoreload config.org
** Light/Dark Theme Toggler
** Visible Whitespace
* Resources
- [[https://github.com/sjarbs/emacs][sjarbs/emacs]]
- [[https://github.com/rememberYou/.emacs.d][rememberYou/.emacs.d]]
- [[https://github.com/jwiegley/dot-emacs][jwiegley/dot-emacs]]
- [[https://github.com/angrybacon/dotemacs][angrybacon/dotemacs]]
- [[https://github.com/mrvdb/emacs-config][mrvdb/emacs-config]]
- [[https://github.com/himmAllRight/dotfiles][himmAllRight/dotfiles]]
- [[https://github.com/larstvei/dot-emacs][larstvei/dot-emacs]]
- [[https://github.com/chenglou/emacs.d][chenglou/emacs.d]]
- [[https://mstempl.netlify.app/post/beautify-org-mode/][mstempl/beautify-org-mode]]
- [[https://elblogdelazaro.gitlab.io/2019-12-16-org-mode-mi-fichero-de-configuracion/][elblogdelazaro/org-mode-mi-fichero-de-configuracion]]
- [[https://github.com/suvratapte/dot-emacs-dot-d][suvratapte/dot-emacs-dot-d]]
- [[https://github.com/hlissner/doom-emacs][hlissner/doom-emacs]]
- [[https://github.com/LeoUfimtsev/ldts/blob/master/.emacs.d/my/orgdotemacs.org][LeoUfimtsev/ldts]]
- [[https://github.com/alphapapa/alpha-org][alphapapa/alpha-org]]
